# Anagram

`Write a program to check if two strings are anagrams of each other. 
An anagram is a word or phrase formed by rearranging the letters of another word or phrase. 
Your program should return True if the two input strings are anagrams, and False otherwise.`

```java
/* package whatever; // don't place package name! */

import java.util.*;
import java.lang.*;
import java.io.*;

/* Name of the class has to be "Main" only if the class is public. */
class Main
{
	public static void main (String[] args) throws java.lang.Exception
	{
		Scanner sc= new Scanner(System.in);
        String t=sc.next();
        String d=sc.next();
        char tt[]=t.toCharArray();
        char dd[]=d.toCharArray();
        Arrays.sort(tt);
        Arrays.sort(dd);
        t=Arrays.toString(tt);
        d=Arrays.toString(dd);
        if(t.equals(d))
        System.out.println("True");
        else
        System.out.println("False");
        /*
        int a[]=new int[26];
        for(int i=0;i<t.length();i++)
        {
            int c= (int)t.charAt(i);
            int g=97-c;
            a[i]=1;
        }
        int count=0;
        for(int i=0;i<t.length();i++)
        {
             int c= (int)t.charAt(i);
            int g=97-c;
            if(a[i]==1);
            count++;
        }
        if(count==t.length())
        System.out.println("True");
        else
        System.out.println("False");*/
        
	}
}
```

# Password Checker

`You are given a function.
int CheckPassword(char str[], int n);
The function accepts string str of size n as an argument. Implement the function which returns 1 if given string str is valid password else 0.
str is a valid password if it satisfies the below conditions.
– At least 4 characters
– At least one numeric digit
– At Least one Capital Letter
– Must not have space or slash (/)
– Starting character must not be a number
Assumption:
Input string will not be empty.`

```java
/* package whatever; // don't place package name! */

import java.util.*;
import java.lang.*;
import java.io.*;

/* Name of the class has to be "Main" only if the class is public. */
class Main
{
	public static void main (String[] args) throws java.lang.Exception
	{
        Scanner sc=new Scanner(System.in);
        String s=sc.next();
        int uc=0;
        int nc=0;
        int sn=0;
        if(s.length()>=4)
        {
            if(s.charAt(0)>='0'&&s.charAt(0)<='9')
            {
            System.out.println(0);
            }
            else
        {
            for(int i=0;i<s.length();i++)
                {
                    char c=s.charAt(i);
                    if(c>='A'&&c<='Z')
                    uc=1;
                    if(c>='0'&&c<='9')
                    nc=1;
                    if(c==' '||c=='/'){
                    System.out.println(0);
                    return;}
                }
                if((uc==1)&&(nc==1))
                System.out.println(1);
                else
                System.out.println(0);
        }
        }
        else
        {
            System.out.println(0);
        }
	}
}

```

# Operators

`You are required to implement the following function.
int operationChoices(int c, int a , int b )
The function accepts 3 positive integers ‘a’ , ‘b’ and ‘c ‘ as its arguments. Implement the function to return.
( a+ b ) , if c=1
( a – b ) , if c=2
( a * b ) ,  if c=3
(a / b) ,  if c =4
Assumption : All operations will result in integer output.`

```
/* package whatever; // don't place package name! */

import java.util.*;
import java.lang.*;
import java.io.*;

/* Name of the class has to be "Main" only if the class is public. */
class Main
{
	public static void main (String[] args) throws java.lang.Exception
	{
		Scanner sc= new Scanner(System.in);
        int a=sc.nextInt();
        int b=sc.nextInt();
        int c=sc.nextInt();
        switch(a){
        case 1:
            System.out.println(b+c);
            break;
        case 2:
            System.out.println(b-c);
            break;
        case 3:
            System.out.println(b*c);
            break;
        case 4:
            System.out.println(b/c);
            break;
        default :
        }
	}
}
```

# Food in House

`The function accepts two positive integers ‘r’ and ‘unit’ and a positive integer array ‘arr’ of size ‘n’ as its argument ‘r’ represents the number of rats present in an area, ‘unit’ is the amount of food each rat consumes and each ith element of array ‘arr’ represents the amount of food present in ‘i+1’ house number, where 0 <= i
Note:
Return -1 if the array is null
Return 0 if the total amount of food from all houses is not sufficient for all the rats.
Computed values lie within the integer range.`

```java
/* package whatever; // don't place package name! */

import java.util.*;
import java.lang.*;
import java.io.*;

/* Name of the class has to be "Main" only if the class is public. */
class Main
{
	public static void main (String[] args) throws java.lang.Exception
	{
		Scanner sc= new Scanner(System.in);
        int r=sc.nextInt();
        int u=sc.nextInt();
        int h=sc.nextInt();
        int a[]=new int [h];
        for(int i=0;i<h;i++)
        a[i]=sc.nextInt();
        int sum=0;
        for(int i=0;i<h;i++)
        {
            sum=sum+a[i];
            if(sum>=r*u){
            System.out.println(i+1);
            return;
        }}

        }
	
}
```

# sum of distance between 3 points

`Write a program to calculate the sum of  distance between three points from each other.`
**Input**

`Enter 6 float values
First and second input will be x1 and y1
Third and Fourth input will be x2 and y2
Fifth and sixth input will be x3 and y3`

/* package whatever; // don't place package name! */

import java.util.*;
import java.lang.*;
import [java.io](http://java.io/).*;

/* Name of the class has to be "Main" only if the class is public. */
class Main
{
public static double distance(float x,float y,float x1,float y1)
{
return Math.sqrt(Math.pow((x1-x),2)+Math.pow((y1-y),2));
}
public static void main (String[] args) throws java.lang.Exception
{
Scanner sc= new Scanner([System.in](http://system.in/));
float x1=sc.nextInt();
float y1=sc.nextInt();
float x2=sc.nextInt();
float y2=sc.nextInt();
float x3=sc.nextInt();
float y3=sc.nextInt();
System.out.println((float)(distance(x1,y1,x2,y2)+distance(x2,y2,x3,y3)+distance(x3,y3,x1,y1)));
}
}

# Largest number with Index

`Write a function, which will find the greatest number from an array with its desired index? 
The greatest number and its desired index should be printed in separate lines.`

```java
/* package whatever; // don't place package name! */

import java.util.*;
import java.lang.*;
import java.io.*;

/* Name of the class has to be "Main" only if the class is public. */
class Main
{
	public static void main (String[] args) throws java.lang.Exception
	{
		Scanner sc= new Scanner(System.in);
        int n=sc.nextInt();
        int a[]=new int[n];
        int index=0;
        int max=Integer.MIN_VALUE;
        for(int i=0;i<n;i++)
        {
            a[i]=sc.nextInt();
            if(max<a[i])
                {   
                    max=a[i];
                    index=i;
                }
        }
        System.out.println(max+"\n"+index);

	}
}

```

# Password Checker

`You are given a function.
int CheckPassword(char str[], int n);
The function accepts string str of size n as an argument. Implement the function which returns 1 if given string str is valid password else 0.
str is a valid password if it satisfies the below conditions.
– At least 4 characters
– At least one numeric digit
– At Least one Capital Letter
– Must not have space or slash (/)
– Starting character must not be a number
Assumption:
Input string will not be empty.`

```java
/* package whatever; // don't place package name! */

import java.util.*;
import java.lang.*;
import java.io.*;

/* Name of the class has to be "Main" only if the class is public. */
class Main
{
	public static void main (String[] args) throws java.lang.Exception
	{
        Scanner sc=new Scanner(System.in);
        String s=sc.next();
        int uc=0;
        int nc=0;
        int sn=0;
        if(s.length()>=4)
        {
            if(s.charAt(0)>='0'&&s.charAt(0)<='9')
            {
            System.out.println(0);
            }
            else
        {
            for(int i=0;i<s.length();i++)
                {
                    char c=s.charAt(i);
                    if(c>='A'&&c<='Z')
                    uc=1;
                    if(c>='0'&&c<='9')
                    nc=1;
                    if(c==' '||c=='/'){
                    System.out.println(0);
                    return;}
                }
                if((uc==1)&&(nc==1))
                System.out.println(1);
                else
                System.out.println(0);
        }
        }
        else
        {
            System.out.println(0);
        }
	}
}
```

# Subset sum

`Given an array of non-negative integers, and a value sum, determine if there is a subset of the given set with sum equal to given sum.

Your task is to complete the function isSubsetSum() which takes the array arr[], its size N and an integer sum as input parameters and returns boolean value true if there exists a subset with given sum
and false otherwise.
The driver code itself prints 1, if returned value is true and prints 0 if returned value is false.`
**Input**

`1st line: Enter the size of array
2nd line: Enter the elements of array
3rd line: Enter the target sum`
**Output**

```java
/* package whatever; // don't place package name! */

import java.util.*;
import java.lang.*;
import java.io.*;

/* Name of the class has to be "Main" only if the class is public. */
class Main
{
	public static void main (String[] args) throws java.lang.Exception
	{
		Scanner sc= new Scanner(System.in);
        int n=sc.nextInt();
        int a[]=  new int[n];
        for(int i=0;i<n;i++)
        a[i]=sc.nextInt();
        int targer=sc.nextInt();
        Arrays.sort(a);
        int sum=0;
        for(int i=0;i<n;i++)
        {
            sum+=a[i];
            if(sum==targer)
            {System.out.println(1);
            break;}
        }
        if(sum!=targer)
        System.out.println(0);
	}
}
```

# Sum of carry

`A carry is a digit that is transferred to left if sum of digits exceeds 9 while adding two numbers from right-to-left one digit at a time
You are required to implement the following function.
int numberOfCarries(int num1 , int num2)
The functions accepts two numbers ‘num1’ and ‘num2’ as its arguments. 
You are required to calculate and return  the total number of carries generated while adding digits of two numbers ‘num1’ and ‘ num2’.
Assumption: num1, num2>=0`
**Input**

`1st line: Enter num1
2nd line: Enter num2`
**Output**

`Print the sum of carry`

```java
import java.util.*;
import java.lang.*;
import java.io.*;

class Main
{
	public static void main (String[] args) throws java.lang.Exception
	{
		Scanner sc = new Scanner(System.in);
        int num1 = sc.nextInt();
        int num2 = sc.nextInt();
        int carry = 0;
        int carryCount = 0;

        while (num1 > 0 || num2 > 0)
        {
            int r1 = num1 % 10;
            int r2 = num2 % 10;
            num1 = num1 / 10;
            num2 = num2 / 10;
            int sum = r1 + r2 + carry;
            if (sum >= 10)
            {
                carry = 1;
                carryCount++;
            }
            else
            {
                carry = 0;
            }
        }

        System.out.println(carryCount);
	}
}
```

# Binary String Operations

```
The Binary number system only uses two digits, 0 and 1 and number system can be called binary string. You are required to implement the following function:
int Operations BinaryString(char* str);
The function accepts a string str as its argument. The string str consists of binary digits separated with an alphabet as follows:
– A denotes AND operation
– B denotes OR operation
– C denotes XOR Operation
You are required to calculate the result of the string str, scanning the string to right taking one operation at a time, and return the same.

NOTE :
No order of priorities of operations is required
Length of str is odd
If str is NULL or None, return -1

```

# Input

```
Enter the string
```

# Output

```
Return the output
```

# Example

**Input:**

```
1C0C1C1A0B1
```

**Output:**

```
1
```

```java
import java.util.*;import java.util.*;

class Main {
    public static void main(String[] args) throws java.lang.Exception {
        Scanner sc = new Scanner(System.in);
        String input = sc.nextLine();
        int result = OperationsBinaryString(input);
        System.out.println(result);
    }

    public static int OperationsBinaryString(String str) {
        if (str == null || str.isEmpty()) {
            return -1;
        }

        int result = Character.getNumericValue(str.charAt(0));

        for (int i = 1; i < str.length(); i += 2) {
            char operation = str.charAt(i);
            char binaryDigit = str.charAt(i + 1);
            int digitValue = Character.getNumericValue(binaryDigit);

            switch (operation) {
                case 'A':
                    result &= digitValue;
                    break;
                case 'B':
                    result |= digitValue;
                    break;
                case 'C':
                    result ^= digitValue;
                    break;
                default:
                    break;
            }
        }

        return result;
    }
}

class Main {
    public static void main(String[] args) throws java.lang.Exception {
        Scanner sc = new Scanner(System.in);
        String input = sc.nextLine();
        int result = OperationsBinaryString(input);
        System.out.println(result);
    }

    public static int OperationsBinaryString(String str) {
        if (str == null || str.isEmpty()) {
            return -1;
        }

        int result = Character.getNumericValue(str.charAt(0));

        for (int i = 1; i < str.length(); i += 2) {
            char operation = str.charAt(i);
            char binaryDigit = str.charAt(i + 1);
            int digitValue = Character.getNumericValue(binaryDigit);

            switch (operation) {
                case 'A':
                    result &= digitValue;
                    break;
                case 'B':
                    result |= digitValue;
                    break;
                case 'C':
                    result ^= digitValue;
                    break;
                default:
                    break;
            }
        }

        return result;
    }
}
```

# Split and Sum

```
You are required to input the size of the matrix then the elements of matrix.
You have to divide the main matrix in two sub matrices (even and odd) in such a way that element at 0 index will be considered as even and element at 1st index will be considered as odd and so on.
You have sort the even and odd matrices in ascending order then print the sum of second largest number from both the matrices
```

# Input

```
1st Line: Enter the size of the array
2nd Line: Enter the elements of the array
```

# Output

```
Sum of second largest number in two subarrays
```

# Example

**Input:**

```
6
2
4
1
7
8
9
```

**Output:**

```
9
```

```java
import java.util.*;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int arr[]= new int[n];
        for (int i = 0; i < n; i++) {
            arr[i]=sc.nextInt();
        }
        int t=0;
        int c=0;
        int a1[]=new int[(n/2)+1];//even index
        int a2[]=new int[(n/2)+1];//odd index
        for(int i=0;i<n;i++)
        {
            if(i%2==0)
            a1[t++]=arr[i];
            else
            a2[c++]=arr[i];
        }
        Arrays.sort(a1);
        Arrays.sort(a2);
        t=a1[a1.length-2]+a2[a2.length-2];
        System.out.println(t);
        
   }
}
```
