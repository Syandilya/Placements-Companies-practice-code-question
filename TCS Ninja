# Maximum of four digit

`Given a maximum of four-digit base 17 representation to the base 17 (10->A,11->B,12->C...16->G) as input.`
**Input**

`Given a maximum of four-digit base 17 representation to the base 17 (10->A,11->B,12->C...16->G) as input.`
**Output**

`output its decimal value.

If the input is not a valid base 17 representation, then print Invalid as the output.`
**Example**

```java
/* package whatever; // don't place package name! */

import java.util.*;
import java.lang.*;
import java.io.*;

/* Name of the class has to be "Main" only if the class is public. */
class Main
{
	public static void main (String[] args) throws java.lang.Exception
	{
		Scanner sc= new Scanner(System.in);
        String T=sc.next();
        int t=0;
        int sum=0;
        int c=0;
        for(int i=T.length()-1;i>=0;i--)
        {
            char f=T.charAt(i);
            if(f>='0'&&f<='9')
                t=(int)(f)-48;
            if(f>='A' && f<='G')
            {
                t=(int)(f)-55;
            }
            sum=sum+t*(int)Math.pow(17,c++);
        }
        System.out.println(sum);
	}
}

```

# greater than all of its prior elements

```
Given an integer array Arr of size N the task is to find the count of elements whose value is greater than all of its prior elements.
Note : 1st element of the array should be considered in the count of the result.
For example,
Arr[]={7,4,8,2,9}
As 7 is the first element, it will consider in the result.
8 and 9 are also the elements that are greater than all of its previous elements.
Since total of  3 elements is present in the array that meets the condition.
Hence the output = 3.
```

# Example :

**Input**

```basic
5 -> Value of N, represents size of Arr
7-> Value of Arr[0]
4 -> Value of Arr[1]
8-> Value of Arr[2]
2-> Value of Arr[3]
9-> Value of Arr[4]
```

**Output :**

```
3
```

```java
/* package whatever; // don't place package name! */

import java.util.*;
import java.lang.*;
import java.io.*;

/* Name of the class has to be "Main" only if the class is public. */
class Main
{
	public static void main (String[] args) throws java.lang.Exception
	{
		Scanner sc= new Scanner(System.in);
        int n=sc.nextInt();
        int a[]=new int[n];
        int c=1;
        for(int i=0;i<n;i++)
        {
            a[i]=sc.nextInt();
        }
        int max=a[0];
        for(int i=0;i<n;i++)
        {
            if(max<a[i])
            {
                max=a[i];
                c++;
            }
        }
        System.out.println(c);
	}
}

```

# vechicle finding

```
An automobile company manufactures both a two wheeler (TW) and a four wheeler (FW). A company manager wants to make the production of both types of vehicle according to the given data below:

1st data, Total number of vehicle (two-wheeler + four-wheeler)=v 2nd data,
Total number of wheels = W The task is to find how many two-wheelers as well as four-wheelers
need to manufacture as per the given data.

Constraints :

2<=W W%2=0 V<W Print “INVALID INPUT” , if inputs did not meet the constraints.

The input format for testing The candidate has to write the code to accept two positive numbers separated by a new line.

First Input line – Accept value of V. Second Input line- Accept value for W. The output format for testing
```

# Example

**Input:**

```basic
200 -> Value of V 540 -> Value of W

```

**Output:**

```basic
130
70
```

```java
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        
        int V = sc.nextInt();
        int W = sc.nextInt();
        
        if (W < 2 || W % 2 != 0 || V >= W) {
            System.out.println("INVALID INPUT");
            return;
        }
        
        int FW = (W - 2 * V) / 2;
        int TW = V - FW;
        
        if (TW < 0 || FW < 0) {
            System.out.println("INVALID INPUT");
        } else {
            System.out.println(TW + " " + FW);
        }
        
        sc.close();
    }
}
```

# Valid String Checker

```
Problem Statement – Given a string S(input consisting) of ‘*’ and ‘#’. The length of the string is variable. The task is to find the minimum number of ‘*’ or ‘#’ to make it a valid string. The string is considered valid if the number of ‘*’ and ‘#’ are equal. The ‘*’ and ‘#’ can be at any position in the string.
Note : The output will be a positive or negative integer based on number of ‘*’ and ‘#’ in the input string.
(*>#): positive integer
(#>*): negative integer
(#=*): 0
```

# Example

**Input:**

```
###***
```

**Output:**

```
0
```

```java
/* package whatever; // don't place package name! */

import java.util.*;
import java.lang.*;
import java.io.*;

/* Name of the class has to be "Main" only if the class is public. */
class Main
{
	public static void main (String[] args) throws java.lang.Exception
	{
		Scanner sc= new Scanner(System.in);
        String s=sc.next();
        int has=0;
        int star=0;
        for(int i=0;i<s.length();i++)
        {
            if(s.charAt(i)=='*')
            star++;
            else if(s.charAt(i)=='#')
            has++;
            else
            continue;
        }
        System.out.println(star-has);
	}
}
```

# Number of parking spaces

```
A parking lot in a mall has RxC number of parking spaces. Each parking space will either be  empty(0) or full(1). The status (0/1) of a parking space is represented as the element of the matrix. The task is to find index of the prpeinzta row(R) in the parking lot that has the most of the parking spaces full(1).
Note :
RxC- Size of the matrix
Elements of the matrix M should be only 0 or 1.
```

# Example

**Input:**

```
3   -> Value of R(row)
3    -> value of C(column)
[0 1 0 1 1 0 1 1 1] -> Elements of the array M[R][C] where each element is separated by new line.
```

**Output:**

```
3  -> Row 3 has maximum number of 1’s
```

```java
/* package whatever; // don't place package name! */

import java.util.*;
import java.lang.*;
import java.io.*;

/* Name of the class has to be "Main" only if the class is public. */
class Main
{
	public static void main (String[] args) throws java.lang.Exception
	{
		Scanner sc= new Scanner(System.in);
        int r=sc.nextInt();
        int c=sc.nextInt();
        int a[][]=new int [r][c];
        for(int i=0;i<r;i++)
        {
            for(int j=0;j<c;j++)
            {
                a[i][j]=sc.nextInt();
            
            }
        }
        int res[]=new int[r];
        for(int i=0;i<r;i++)
        {
            int co=0;
            for(int j=0;j<c;j++)
            {
                if(a[i][j]==1)
                co++;
            }
            res[i]=co;
        }
        int max=Integer.MIN_VALUE;
        for(int i=0;i<r;i++)
        {
            if(max<res[i])
            max=res[i];
        }
        System.out.println(max);
	}
}
```

# Stolen value

```
There are n houses built in a line, each of which contains some value in it. A thief is going to steal the maximal value of these houses, but he can’t steal in two adjacent houses because the owner of the stolen houses will tell his two neighbours left and right side. What is the maximum stolen value?
```

# Input

```
First an integer n, denoting how many houses are there. Then n space separated integers
denoting the values for the n houses.
```

# Output

```
An integer denoting the maximum value possible to steal.
```

# Example

**Input:**

```
7
6 7 1 3 8 2 5
```

**Output:**

```java
/* package whatever; // don't place package name! */

import java.util.*;
import java.lang.*;
import java.io.*;

/* Name of the class has to be "Main" only if the class is public. */
class Main
{
	public static void main (String[] args) throws java.lang.Exception
	{
		Scanner sc= new Scanner(System.in);
        int n=sc.nextInt();
        int a[]=new int [n];
        for(int i=0;i<n;i++)
        {
            a[i]=sc.nextInt();
        }
        int dp[]=new int [n];
        dp[0]=a[0];
        dp[1]=Math.max(a[0],a[1]);
        for(int i=2;i<n;i++)
        dp[i]=Math.max(dp[i-1],dp[i-2]+a[i]);
        System.out.println(dp[n-1]);

	}
}
```

# single-digit sum

```
An intelligence agency has received reports about some threats. The reports consist of numbers
in a mysterious method. There is a number “N” and another number “R”. Those numbers are
studied thoroughly and it is concluded that all digits of the number ‘N’ are summed up and this action is
performed ‘R’ number of times. The resultant is also a single digit that is yet to be deciphered.
task here is to find the single-digit sum of the given number ‘N’ by repeating the action ‘R’ number of times.

If the value of ‘R’ is 0, print the output as ‘0’.
```

# EXAMPLE

**Input:**

```
99
3
```

**Output:**

```
9
```

```java
/* package whatever; // don't place package name! */

import java.util.*;
import java.lang.*;
import java.io.*;

/* Name of the class has to be "Main" only if the class is public. */
class Main
{
	public static void main (String[] args) throws java.lang.Exception
	{
		Scanner sc= new Scanner(System.in);
        int n=sc.nextInt();
        int r=sc.nextInt();
       if(r==0)
       {System.out.println(r);
        return;
       }
        while(n>10)
        {
            n=n/10+n%10;
        }
        n=n*r;
        while(n>10)
        {
            n=n/10+n%10;
        }
        System.out.println(n);
	}
}
```

# AVG OXYGEN LEVEL

```
A batch of three trainees is set to appear for a running test on a track, completing three rounds.
After each round, their oxygen levels are recorded. Once the trainees have finished all three rounds,
calculate the average oxygen level for each trainee over the three rounds. The trainee with the
highest average oxygen level is considered the most fit. If multiple trainees have the same highest
average level, all of them are selected as the most fit. Display the most fit trainee(s) and their
highest average oxygen level.
Conditions:
The oxygen value entered should be between 1 and 100.
If the highest average oxygen level among trainees is below 70,
declare all trainees unfit with the message: "All trainees are unfit".
Average oxygen values should be rounded to the nearest integer.
```

# Input

```
Three lines of input, each containing three integers separated by spaces.
Each integer represents the oxygen level for a trainee after a round.
```

# Output

```
If there are trainees with the highest average oxygen level, print "Trainee no:" followed by their numbers.

If all trainees are unfit (average oxygen level below 70), print "All trainees are unfit".
```

# Example

**Input:**

```
95
92
95
92
90
92
90
92
90
```

**Output:**

```
1
```

```java
/* package whatever; // don't place package name! */

import java.util.*;
import java.lang.*;
import java.io.*;

/* Name of the class has to be "Main" only if the class is public. */
class Main
{
	public static void main (String[] args) throws java.lang.Exception
	{
        Scanner sc= new Scanner(System.in);
        int a[]=new int[3];
        for(int i=0;i<3;i++)
        {
            int sum=0;
            int c=1;
            for(int j=c;j<=3;j++)
            {
                sum=sum+sc.nextInt();
            }
            a[i]=sum/3;
        }
        int flag=3;
        int Tranieeno=0;
        int max=Integer.MIN_VALUE;
        for(int i=0;i<3;i++)
        {
            if(a[i]>70)
            {
            if(max<a[i])
                {
                    max=a[i];
                    Tranieeno=i+1;
                }
            }
            else
            {
                flag--;
            }
        }
        if(flag<=0)
        System.out.println("All traniees are unfit");
        else
        System.out.println(Tranieeno);
    		// your code goes here
	}
}
```

# Seating Arrangements

```
In a Conference ,attendees are invited for a dinner after the conference.
The Co-ordinator,Sagar arranged around round tables for dinner and want to have an impactful seating experience for the attendees.Before finalizing the seating arrangement,he wants to analyze all the
possible arrangements.These are R round tables and N attendees.
In case where N is an exact multiple of R,the number of attendees must be exactly N//R,,
If N is not an exact multiple of R, then the distribution of attendees must be as equal as possible.
Please refer to the example section before for better understanding.
Attendees are numbered from 1 to N.
```

# Input

```
The first line contains T denoting the number of test cases.
Each test case contains two space separated integers R and N,
Where R denotes the number of round tables and N denotes the number of attendees.
```

# Output

```
Single Integer S denoting the number of possible unique arrangements.
```

# Example

**Input:**

```
1
2 5
```

**Output:**

```
10
```

```java
/* package whatever; // don't place package name! */

import java.util.*;
import java.lang.*;
import java.io.*;

/* Name of the class has to be "Main" only if the class is public. */
class Main
{
    public static int factorial(int n)
    {
        if(n<=1)
        return 1;
        else
        return n*factorial(n-1);
    }
	public static void main (String[] args) throws java.lang.Exception
	{
		Scanner sc= new Scanner(System.in);
        int t=sc.nextInt();
        while(t>0)
        {
            int r=sc.nextInt();
        int n=sc.nextInt();
        
        System.out.println(factorial(n)/(factorial(n-r)*factorial(r)));
        t--;
        }
	}
}
```

# decimal to binary

```
Joseph is learning digital logic and is tasked with solving a problem that involves converting a
positive integer from decimal to binary, toggling all bits after the most significant
bit (including the most significant bit), and then converting the result back to a positive integer.
Constraints:
1 <= N <= 100
```

# Input

```
A single integer between 1 and 100.
```

# Output

```
A single integer which is the result after toggling the bits.
```

# Example

**Input:**

```
10
```

**Output:**

```java
/* package whatever; // don't place package name! */

import java.util.*;
import java.lang.*;
import java.io.*;

/* Name of the class has to be "Main" only if the class is public. */
class Main
{
	public static void main (String[] args) throws java.lang.Exception
	{
		Scanner sc= new Scanner(System.in);
        int n=sc.nextInt();
        String t=Integer.toBinaryString(n);
        String res="";
        for(char ch : t.toCharArray())
        {
            if(ch=='0')
            res+='1';
            else
            res+='0';
        }
        System.out.print(Integer.parseInt(res,2));
        
	}
}
```
